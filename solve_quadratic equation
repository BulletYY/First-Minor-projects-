import argparse  # Importuje moduł do obsługi argumentów z linii poleceń
import math      # Importuje moduł matematyczny

"""-- coding: utf-8 --"""

""" Tymoteusz Hanusiak Grupa nr 1 """

def solve_quadratic(a, b, c):
    """
    Rozwiązuje równanie kwadratowe o postaci ax^2 + bx + c = 0.
    Args:
        a (float): Współczynnik przy x^2.
        b (float): Współczynnik przy x.
        c (float): Wyraz wolny.

    Returns:
        tuple: Krotka zawierająca pierwiastki równania oraz flagę wskazującą czy są rzeczywiste.
    """
    # Oblicza deltę równania kwadratowego
    delta = b**2 - 4*a*c # przypisuje delte
    if delta > 0: # jezeli delta jest wieksza do 0
        x1 = (-b + math.sqrt(delta)) / (2*a)  # Oblicza Pierwiastek rzeczywisty rownania
        x2 = (-b - math.sqrt(delta)) / (2*a) # Oblicza drugi Pierwiastek rzeczywisty rownania
        return (x1, x2), True  # Zwraca pierwiastki oraz flagę wskazującą, że są one rzeczywiste
    elif delta == 0: # jezeli delta jest rowna 0
        # Oblicza jeden rzeczywisty pierwiastek równania
        x = -b / (2*a) # przypisuje jedno miejsce zerowe -b/2a
        return (x,), True  # Zwraca pierwiastek oraz flagę wskazującą, że jest on rzeczywisty
    else:
        # Oblicza dwa zespolone pierwiastki równania
        real_part = -b / (2*a) # przypisujemy czesc rzeczywista
        imaginary_part = math.sqrt(abs(delta)) / (2*a) # przypisujemy czesc urojona
        return (real_part + imaginary_part * 1j, real_part - imaginary_part * 1j), False  # Zwraca pierwiastki oraz flagę wskazującą, że są one zespolone

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Program do rozwiązywania równania kwadratowego.") # Tworzy parser do obsługi argumentów z linii poleceń
  
    parser.add_argument('a', type=float, help='Współczynnik przy x^2')# Dodaje argument a
    parser.add_argument('b', type=float, help='Współczynnik przy x')# Dodaje argument b
    parser.add_argument('c', type=float, help='Wyraz wolny')# Dodaje argument c
    
    args = parser.parse_args() # Parsuje argumenty z linii poleceń
    
    roots, is_real = solve_quadratic(args.a, args.b, args.c) # Rozwiązuje równanie kwadratowe

    # Wyświetla wyniki w zależności od rodzaju pierwiastków
    if is_real: # jezeli czesc realna istnieje 
        if len(roots) == 1:  # jezeli dlugosc pierwiastka jest rowna 1
            print(f"Pierwiastek równania: {roots[0]}") # wypisanie pierwiastka rownanania 
        else:
            print(f"Pierwiastki równania: {roots[0]}, {roots[1]}") # wypisanie pierwiastków rownanania 
    else:
        print(f"Pierwiastki równania: {roots[0]} + {roots[1]}")  # wypisuje pierwiastki zespolone
